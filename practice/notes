

public class Test1 {

	//variables
	
	 static int stid =100;
	 static String stname="suma";
	 static float stmarks = 98.5f;
	 static char grade='A';
	 static boolean isActive = true;
	
	//method defining to display the values
	 public static void display()
	 {
		 System.out.println("student id is : " + stid);
		 System.out.println("studetn name is: " + stname);
		 System.out.println("student marks are : " + stmarks);
		 System.out.println("student grade is: " + grade);
		 System.out.println("io student is active or not:?" + isActive);
	 }
	
	
   //main method 
	 public static void main(String[] args) {
		
		 //call display()
		 display();
		
	}
	
	
	
	
}


object:
````````
instance of a class is known as object



instance: 

allocating memory spaces for instance or non-static properties which we are defining 
inside the class.



public class Test1 {

	//non static variables or instance variable
	
	  int stid;
	  String stname;
	  float stmarks;
	  char grade;
	  boolean isActive;
	  static String collegeName;
	  
	
	  public static void display()
	  {
		
		  //static area
		  System.out.println("=======================================");
		  System.out.println("student id is: " + (new Test1().stid=200));
		  System.out.println("student name is:" +(new Test1().stname="rk"));
		  System.out.println("student marks are :" + (new Test1().stmarks=93.5f));
		  System.out.println("student grade is: " + (new Test1().grade='A'));
		  System.out.println("student is active or not?" + (new Test1().isActive=true));
		  
		  
	  }
	
	
   //main method 
	 public static void main(String[] args) {
		
		 //static area
		 //create the object
		 
		 Test1 suma = new Test1();
		 
		 suma.stid=100;
		 suma.stname="suma";
		 suma.stmarks=98.5f;
		 suma.grade='A';
		 suma.isActive=true;
		 collegeName="CBIT";
		
		 System.out.println("student id is: " + suma.stid);
		 System.out.println("student name is: " + suma.stname);
		 System.out.println("student marks are: " + suma.stmarks);
		 System.out.println("student grade is: " + suma.grade);
		 System.out.println("student is active or not?:" + suma.isActive);
		 System.out.println("student collegename is:" + suma.collegeName);
		 
		 Test1 jd = new Test1();
		 jd.stid=101;
		 jd.stname="jagadeesh";
		 jd.stmarks=99.5f;
		 jd.grade='A';
		 jd.isActive=true;
		 collegeName="CBIT";
		 System.out.println("==============================================");
		 System.out.println("student id is: " + jd.stid);
		 System.out.println("student name is: " + jd.stname);
		 System.out.println("student marks are: " + jd.stmarks);
		 System.out.println("student grade is: " + jd.grade);
		 System.out.println("student is active or not?:" + jd.isActive);
		 System.out.println("student collegename is:" + jd.collegeName);
		 
		 
		 //call display()
		 
		 display();
		 
		 
		 
	}
	
	
	
	
}


without constructor one example:
```````````````````````````````

public class Test2 {
	
	//declaring the variable
	int stid;
	String stname;
	
	
	//assign the values 
	
	public void assignValues()
	{
		stid=100;
		stname="Ram";
		
	}
	
	//display the values
	
	public void display()
	{
		System.out.println("student id is: " + stid);
		System.out.println("student name is: " + stname);
		
	}
	//main method
	
	public static void main(String[] args)
	{
		//static area
		//create the object 
		Test2 obj = new Test2();
		
		//call assignValues()
		obj.assignValues();
		//call display()
		obj.display();
		
		
	}
	

}


with constructor
```````````````

public class Test2 {
	
	//declaring the variable
	int stid;
	String stname;
	
	public Test2()
	{
		//initialization logic
		stid=100;
		stname="ram";
	}
	
	
	//display the values
	
	public void display()
	{
		System.out.println("student id is: " + stid);
		System.out.println("student name is: " + stname);
		
	}
	//main method
	
	public static void main(String[] args)
	{
		//static area
		//create the object 
		Test2 obj = new Test2();
		
		
		//call display()
		obj.display();
		
		
	}
	

}

rules:
constructor name must be similar to class name 
constructor should not return anything even void also
constructor should not be inherited
constructor should not be static




purpose:
to initialize the object 

in a class, we can define maximum one default constructor 
we can define n no.of parameterized constructor(s).



this:
this is the java reserved keyword, which is pointing to current class object. 

we can use for two purposes

1.whenever class level variables and constructor/method level parameters or variables 
are same , to differentiate we should use this keyword


public class Test2 {
	
	
	int stid;
	String stname;
	//parameterized constructor 
	
	  public Test2(int stid, String stname)
	  {
		  this.stid=stid;
		  this.stname=stname;
	  }
	 
	public void display()
	{
		System.out.println("student id is:" + this.stid);
		System.out.println("student name is: " + this.stname);
	}
	
	public static void main(String[] args)
	{
		
		//create the object using parameterized constructor
		Test2 obj = new Test2(100,"ram");
		
		obj.display();
		
		
		
	}
	

}

	
2.	note:
constructor always called whenever we create the object.
for example i created 100 times object 
so how many times constructor will be invoked?
100 times


public class Test4 {
	
	//variable declaration 
	int stid;
	String stname;
	
	//define the constructor
	
	Test4()
	{
		//initialization logic
		stid=100;
		stname="rama";
	}
	
	public void display()
	{
		System.out.println("student id is: " + stid);
		System.out.println("student name is:" + stname);
	}
	
	
	
	
	public static void main(String[] args) {
		
		
		Test4 obj = new Test4();
		obj.display();
	}

}

system generated default constructor responsibility is assign
the default values based on the datatype category

user defined default constructor responsisbility is to assign
the our own values based on the requirement.

user defiend parameterized cosntrcutor 

responsibility: 
	
	

public class Test4 {
	

	
	//user defined parameterized constructor 
	public Test4(int x, String y)
	{
		System.out.println("iam from parameterized constructor");
	}
	
	//user defined default constructor
	public Test4() {
		//call the above constructor 
		this(4,"suma");
		System.out.println("iam from default constructor");
	}
	
	
	public static void main(String[] args) {
		
		
		
		Test4 obj1 = new Test4();
		
		
	}

}

--

public class Test4 {
	//class level variables
	int stid;
	String stname;

	//user defined parameterized constructor 
	public Test4(int stid, String stname)
	{
	   this.stid=stid;
	   this.stname=stname;
	}
	
	public void display()
	{
		System.out.println("student id is: " + this.stid);
		System.out.println("student name is: " + this.stname);
	}
	
	
	public static void main(String[] args) {
	
		Test4 obj1 = new Test4(100,"rk");
		
		obj1.display();
		
		
	}

}


this
`````
this is the java reserved keyword 

we are using in two areas

1.to differentiate class level and method level parameters 
  when both are same
  
2.to call current class constructor(s) from other constructor(s).

note:
using this(),this(..) must be the first executable statement 
inside the constructor 

note:
constructor calling is from top to bottom but 
execution is from bottom to top.


public class Test5 {
	
	public static void main(String[] args) {
		
		
		String s1 = args[0];
		
		int fno = Integer.parseInt(s1);
		
		String s2 = args[1];
		
		int sno = Integer.parseInt(s2);
		
		int result = fno + sno;
		
		System.out.println("sum is:  "  + result);
	}

}

--

public class Test5 {
	
	public static void main(String[] args) {
		
     System.out.println("sum is:  "  + (Integer.parseInt(args[0])+Integer.parseInt(args[1])));
	}

}

note:
whatever the data we are passing during execution of the program 
that data will be considering as an arugments to the main method 

by default , it will be considering as string type.

based on the requirement, we can convert from String type to 
required type(s) using parser methods of Wrapper classes. 


control statements:
purpose:
to control the flow of execution based on certain conditions.

if statement
if-else statement
if-else-if ladder
switch case
for loop 
while loop
dowhile
break
continue
foreach 


if statement:
executes a block of code if a specified condition is true. 

syntax:
 if(condition)
 {
   //code to execute
   }
   
if-else statement:
executes one block of code if the condition is true, and 
another block if it is false. 

if(condition)
{
}
else
{
}


public class Test6 {
	
	public static void main(String[] args) {
		
		int num=11;
		if(num%2==0)
		{
			System.out.println(num + " is even number");
		}
		else
		{
			System.out.println(num + " is odd number");
		}
		
	}

}

if-else-if ladder:
``````````````````
multiple conditions can be checked sequentially.

public class Test6 {
	
	public static void main(String[] args) {
		
		int num=7;
		if(num>10)
		{
			System.out.println("number is greater than 10");
		}
		else if(num > 5)
		{
			System.out.println("number is greater than 5");
		}
		else if(num >20 )
		{
			System.out.println("number is greater than 20");
		}
		else
		{
			System.out.println("number is 5 or less");
		}
		
	}

}

switch case:
this is used to execute one of many code blocks based on the 
value of an expression .


swtich(expression){
 
   case value1:
     //code for value1
     break;
   case value2;
     //code for value2
     break;
     ....
     
   default:
      //default code if no cases match
      }


public class Test7 {
	public static void main(String[] args) {
		
		int a=10,b=5;
		int max = (a<b)?a:b;
		System.out.println("min value: " + max);
	}
	

}


loops in java:
for
while
dowhile
foreach



public class Test8 {
	
	public static void main(String[] args) {
		
		for(int i=1;i<=5;i++) {
		System.out.println("welcome to java sessions");
		}
	}

}

--

public class Test9 {
	
	public static void main(String[] args) {
		
		int i=10;
		System.out.println(i++);//10
		System.out.println(i);//11
		
		System.out.println(++i);//12
		
		System.out.println(i--);//12
		System.out.println(i);//11
		System.out.println(--i);//10
		
		
	}

}

---

public class Test8 {
	
	public static void main(String[] args) {
		
		for(int i=1;i<=10;i++) {
			
			if(i%2!=0)
			{
				System.out.println(i);
			}
		
		}
	}

}

---

public class Test8 {
	
	public static void main(String[] args) {
		
		//initialization
		int i=10;
		while(i>=1)
		{
			System.out.println(i);
			i--;
		}
	}

}

----
dowhile loop:
```````````````

public class Test8 {
	
	public static void main(String[] args) {
		
		int i=1;
		do {
			System.out.println(i);
			i++;
		} while (i<=0);
		
	}

}

---

public class Test8 {
	
	public static void main(String[] args) {
		
		int x[]= {10,20,30,40,50};
		
	    for(int i=0;i<x.length;i++)
	    {
	    	System.out.println(x[i]);
	    }
	    
	    System.out.println("=======================");
	    for(int y:x)
	    {
	    	System.out.println(y);
	    }
	    
	}

}

---

public class Test10 {
	
	
	public static void main(String[] args) {
		
		for(int i=1;i<=5;i++)
		{
			if(i==3) {
				continue;//skip the iteration when i equals 3
			}
			System.out.println(i);
		}
		System.out.println("loop ended.");
	}

}

---

public class Test11 {
	
	public void sum(int x, int y)
	{
		System.out.println("integer sum is: " +(x+y));
	}
	
	public void sum(double x, double y)
	{
		System.out.println("double sum is: " + (x+y));
	}

    public static void main(String[] args) {
    	int x;//x is a variable of int type
    	
		Test11 obj;//obj is also a variable of Test11 type
		obj= new Test11();//object referencing
		
		
		obj.sum(7, 6);
		obj.sum(4.5, 5.6);
    	
	}
}

note:
method overloading:
it is the process of defining same method by changing 
signature
 
 signature -> no.of parameters
   ->type of parameters
   ->atleast order of parameters
   
 note:
 single class is enough to perfrom or to achieve 
 method overloading or compiletime polymorphism
 
   
method overriding:
``````````````````
method name is same 
but logic is different from parent class to child class.

class Parent
{
  public void sum(){x+y}
  
}
class Child extends Parent
{
public void sum(){x-y}
}

why should i go for method overriding:
```````````````````````````````````
if already logic was there in parent class method 
that logic is not meeting my requirement 
then take the method and provide your own logic.

class Parent
{
  marriage()
  {
    System.out.println("arranged marriage");
    
  }
}

class Child extends Parent
{

   marriage()
   {
   System.out.println("love marriage");
   }
   
}


--

public class Parent {

	public void sum(int x, int y)
	{
		System.out.println("sum is:" + (x+y));
	}
}


runtime polymorphism:
```````````````````````
the polymorphism can be decided during the runtime by the jvm
based on the object type 
is known as runtime polymorphism. 

if method calling will be binded to particular method based 
on the reference variable is known as compile time polymorphism. 


method overloading is the best example for achieving 
compile time polymorphism 

method overriding is the best example for achieving 
runtime polymorphism. 



list of predefined packages:
`````````````````````````````
java.applet
java.awt -main package 
java.awt.color
java.awt.datatransfer
java.awt.dnd
java.awt.event
java.awt.font
java.awt.geom
java.awt.im
java.awt.im.spi
java.awt.image
java.awt.image.renderable
java.awt.print
java.beans
java.beans.beancontext
java.io
java.lang-main package
java.lang.annotation
java.lang.instrument
java.lang.invoke
java.lang.management
java.lang.ref
java.lang.reflect
java.math
java.net
java.nio
java.nio.channels
java.nio.channels.spi
java.nio.charset
java.nio.charset.spi
java.nio.file
java.nio.file.attribute
java.nio.file.spi
java.rmi
java.rmi.activation
java.rmi.dgc
java.rmi.registry
java.rmi.server
java.security
java.security.acl
java.security.cert
java.security.interfaces
java.security.spec
java.sql
java.text
java.text.spi
java.time
java.time.chrono
java.time.format
java.time.temporal
java.time.zone
java.util
java.util.concurrent
java.util.concurrent.atomic
java.util.concurrent.locks
java.util.function
java.util.jar
java.util.logging
java.util.prefs
java.util.regex
java.util.spi
java.util.stream
java.util.zip







